[tool.poetry]
name = "vivcord"
version = "0.1.0"
description = ""
authors = []
license = "MIT"

[tool.poetry.dependencies]
python = ">=3.10.0,<4.0"
loguru = "^0.5.3"
aiohttp = "^3.8.1"
typing-extensions = "^4.0.1"

[tool.poetry.dev-dependencies]
flake8 = "*"
flake8-bugbear = "*"
pep8-naming = "*"
flake8-builtins = "*"
flake8-docstrings = "*"
darglint = "*"
flake8-isort = "*"
flake8-comprehensions = "*"
flake8-bandit = "*"
flake8-colors = "*"
flake8-eradicate = "*"
flake8-pytest-style = "*"
flake8-blind-except = "*"
flake8-black = "*"
flake8-broken-line = "*"
flake8-fixme = "*"
flake8-multiline-containers = "*"
flake8-pep3101 = "*"
flake8-simplify = "*"
flake8-variables-names = "*"
flake8-functions = "*"
flake8-use-fstring = "*"
flake8-length = "*"
dlint = "*"
flake8-annotations-complexity = "*"
flake8-type-checking = "*"

black = "*"
isort = "*"
taskipy = "*"
pyright = "*"
pytest = "*"
pre-commit = "*"
pytest-typechecker = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true

[tool.pyright]
# turn on EVERYTHING
typeCheckingMode = "strict"
reportPropertyTypeMismatch = "error"
reportUninitializedInstanceVariable = "error"
reportCallInDefaultInitializer = "error"
reportImplicitStringConcatenation = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "warning"
reportImportCycles = "none"

[tool.taskipy.tasks]
lint = { cmd = "flake8 vivcord; pyright vivcord", help = "Lints project" }
format = { cmd = "isort vivcord; black vivcord --target-version py310", help = "Formats project" }
test = { cmd = "pytest tests", help = "Test project" }

[tool.pytest.ini_options]
xfail_strict = true